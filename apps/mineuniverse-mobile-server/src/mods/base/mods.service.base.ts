/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Mods as PrismaMods,
  Status as PrismaStatus,
} from "@prisma/client";

export class ModsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ModsCountArgs, "select">): Promise<number> {
    return this.prisma.mods.count(args);
  }

  async modsItems(args: Prisma.ModsFindManyArgs): Promise<PrismaMods[]> {
    return this.prisma.mods.findMany(args);
  }
  async mods(args: Prisma.ModsFindUniqueArgs): Promise<PrismaMods | null> {
    return this.prisma.mods.findUnique(args);
  }
  async createMods(args: Prisma.ModsCreateArgs): Promise<PrismaMods> {
    return this.prisma.mods.create(args);
  }
  async updateMods(args: Prisma.ModsUpdateArgs): Promise<PrismaMods> {
    return this.prisma.mods.update(args);
  }
  async deleteMods(args: Prisma.ModsDeleteArgs): Promise<PrismaMods> {
    return this.prisma.mods.delete(args);
  }

  async getStatus(parentId: string): Promise<PrismaStatus | null> {
    return this.prisma.mods
      .findUnique({
        where: { id: parentId },
      })
      .status();
  }
}
