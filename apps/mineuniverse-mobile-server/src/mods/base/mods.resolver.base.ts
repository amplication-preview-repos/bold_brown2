/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Mods } from "./Mods";
import { ModsCountArgs } from "./ModsCountArgs";
import { ModsFindManyArgs } from "./ModsFindManyArgs";
import { ModsFindUniqueArgs } from "./ModsFindUniqueArgs";
import { CreateModsArgs } from "./CreateModsArgs";
import { UpdateModsArgs } from "./UpdateModsArgs";
import { DeleteModsArgs } from "./DeleteModsArgs";
import { Status } from "../../status/base/Status";
import { ModsService } from "../mods.service";
@graphql.Resolver(() => Mods)
export class ModsResolverBase {
  constructor(protected readonly service: ModsService) {}

  async _modsItemsMeta(
    @graphql.Args() args: ModsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Mods])
  async modsItems(@graphql.Args() args: ModsFindManyArgs): Promise<Mods[]> {
    return this.service.modsItems(args);
  }

  @graphql.Query(() => Mods, { nullable: true })
  async mods(@graphql.Args() args: ModsFindUniqueArgs): Promise<Mods | null> {
    const result = await this.service.mods(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Mods)
  async createMods(@graphql.Args() args: CreateModsArgs): Promise<Mods> {
    return await this.service.createMods({
      ...args,
      data: {
        ...args.data,

        status: args.data.status
          ? {
              connect: args.data.status,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Mods)
  async updateMods(@graphql.Args() args: UpdateModsArgs): Promise<Mods | null> {
    try {
      return await this.service.updateMods({
        ...args,
        data: {
          ...args.data,

          status: args.data.status
            ? {
                connect: args.data.status,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Mods)
  async deleteMods(@graphql.Args() args: DeleteModsArgs): Promise<Mods | null> {
    try {
      return await this.service.deleteMods(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Status, {
    nullable: true,
    name: "status",
  })
  async getStatus(@graphql.Parent() parent: Mods): Promise<Status | null> {
    const result = await this.service.getStatus(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
