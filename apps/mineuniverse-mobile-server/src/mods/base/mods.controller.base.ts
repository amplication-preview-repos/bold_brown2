/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ModsService } from "../mods.service";
import { ModsCreateInput } from "./ModsCreateInput";
import { Mods } from "./Mods";
import { ModsFindManyArgs } from "./ModsFindManyArgs";
import { ModsWhereUniqueInput } from "./ModsWhereUniqueInput";
import { ModsUpdateInput } from "./ModsUpdateInput";

export class ModsControllerBase {
  constructor(protected readonly service: ModsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Mods })
  async createMods(@common.Body() data: ModsCreateInput): Promise<Mods> {
    return await this.service.createMods({
      data: {
        ...data,

        status: data.status
          ? {
              connect: data.status,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,

        status: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Mods] })
  @ApiNestedQuery(ModsFindManyArgs)
  async modsItems(@common.Req() request: Request): Promise<Mods[]> {
    const args = plainToClass(ModsFindManyArgs, request.query);
    return this.service.modsItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,

        status: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Mods })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mods(
    @common.Param() params: ModsWhereUniqueInput
  ): Promise<Mods | null> {
    const result = await this.service.mods({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,

        status: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Mods })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMods(
    @common.Param() params: ModsWhereUniqueInput,
    @common.Body() data: ModsUpdateInput
  ): Promise<Mods | null> {
    try {
      return await this.service.updateMods({
        where: params,
        data: {
          ...data,

          status: data.status
            ? {
                connect: data.status,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,

          status: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Mods })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMods(
    @common.Param() params: ModsWhereUniqueInput
  ): Promise<Mods | null> {
    try {
      return await this.service.deleteMods({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,

          status: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
